{
  "Validate and Format CPF": {
    "prefix": "blip-validate-cpf-and-format",
    "body": [
      "function run(cpf) {",
      "  const invalidCpfMessage = false",
      "",
      "  try {",
      "    cpf = cpf.replace(/\\D/g, '');",
      "",
      "    if (cpf.length < 9 || cpf.length > 11) {",
      "      return invalidCpfMessage;",
      "    }",
      "",
      "    let sum = 0;",
      "    let remainder;",
      "",
      "    for (let i = 1; i <= 9; i++) {",
      "      sum += parseInt(cpf.substring(i - 1, i)) * (11 - i);",
      "    }",
      "",
      "    remainder = (sum * 10) % 11;",
      "",
      "    if ((remainder === 10) || (remainder === 11)) {",
      "      remainder = 0;",
      "    }",
      "",
      "    if (remainder !== parseInt(cpf.substring(9, 10))) {",
      "      return invalidCpfMessage;",
      "    }",
      "",
      "    if (cpf.length === 11) {",
      "      sum = 0;",
      "      for (let i = 1; i <= 10; i++) {",
      "        sum += parseInt(cpf.substring(i - 1, i)) * (12 - i);",
      "      }",
      "",
      "      remainder = (sum * 10) % 11;",
      "",
      "      if ((remainder === 10) || (remainder === 11)) {",
      "        remainder = 0;",
      "      }",
      "",
      "      if (remainder !== parseInt(cpf.substring(10, 11))) {",
      "        return invalidCpfMessage;",
      "      }",
      "    }",
      "",
      "    cpf = cpf.padStart(11, '0');",
      "    cpf = cpf.replace(/(\\d{3})(\\d{3})(\\d{3})(\\d{2})/, \"$1.$2.$3-$4\");",
      "",
      "    return cpf;",
      "  } catch (err) {",
      "    return false;",
      "  }",
      "}"
    ],
    "description": "Valida e formata um CPF no formato 000.000.000-00"
  }
}
